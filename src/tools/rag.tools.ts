import { VectorStoreIndex, tool, Settings, Document } from 'llamaindex';
import { z } from 'zod';
import { HuggingFaceEmbedding } from '@llamaindex/huggingface';
import { Ollama } from '@llamaindex/ollama';
import * as fs from 'fs';
import * as path from 'path';

// Configure embedding and LLM models
Settings.embedModel = new HuggingFaceEmbedding();
Settings.llm = new Ollama({
  model: 'llama3.1:8b',
  config: {
    host: 'http://localhost:11434'
  }
});

async function getDataSource() {
  const allDocuments: Document[] = [];

  // Load markdown documents
  const docsDir = 'docs';
  const markdownFiles = fs.readdirSync(docsDir).filter((file) => file.endsWith('.md'));

  for (const mdFile of markdownFiles) {
    const filePath = path.join(docsDir, mdFile);
    const content = fs.readFileSync(filePath, 'utf-8');
    const document = new Document({
      text: content,
      metadata: {
        file_name: mdFile,
        file_path: filePath,
        file_type: 'markdown'
      }
    });

    allDocuments.push(document);
  }

  // Create index from documents (in-memory for simplicity)
  const index = await VectorStoreIndex.fromDocuments(allDocuments);

  return index;
}

export const ragTool = tool({
  name: 'ragTool',
  description:
    '–ò–∑–ø–æ–ª–∑–≤–∞–π —Ç–æ–∑–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–Ω–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞ Image Watermarking App (Nuxt 4 + WebAssembly). –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ä—Ç –ø—Ä–∞–≤–∏ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ –≤ markdown —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –≤ docs/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –∏ –≤—Ä—ä—â–∞ –Ω–∞–π-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò–∑–ø–æ–ª–∑–≤–∞–π –≥–æ –∫–æ–≥–∞—Ç–æ: 1) –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –ø–∏—Ç–∞ –∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∏ –∑–∞ watermarking –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, WASM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–ª–∏ Rust –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è; 2) —Ç—Ä—è–±–≤–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ setup, prerequisites (Node.js, Rust, wasm-pack) –∏–ª–∏ build –ø—Ä–æ—Ü–µ—Å–∏; 3) –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∏—Å–∫–∞ –¥–∞ –∑–Ω–∞–µ –∑–∞ watermark –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞—Ç–æ PNG stamps, opacity control, text watermarks –∏–ª–∏ batch processing; 4) —Ç—Ä—è–±–≤–∞—Ç –æ—Ç–≥–æ–≤–æ—Ä–∏ –∑–∞ development workflow, deployment –∫—ä–º Cloudflare –∏–ª–∏ troubleshooting –Ω–∞ WASM –ø—Ä–æ–±–ª–µ–º–∏; 5) –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏ (JPG, PNG, WebP), directory saving –∏–ª–∏ performance optimization.',
  parameters: z.object({
    query: z.string().describe('–ó–∞—è–≤–∫–∞—Ç–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞.')
  }),
  execute: async ({ query }: { query: string }) => {
    console.log(`üìö RAG –¢—ä—Ä—Å–µ–Ω–µ: –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ "${query}" –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞...`);

    const index = await getDataSource();
    const queryEngine = index.asQueryEngine({
      similarityTopK: 5 // Return top 5 most relevant chunks
    });

    const response = await queryEngine.query({ query });
    const responseText = response.toString();

    console.log(`‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${responseText.length} —Å–∏–º–≤–æ–ª–∞`);
    return responseText;
  }
});
