import { tool, Settings, Document } from 'llamaindex';
import { z } from 'zod';
import { HuggingFaceEmbedding } from '@llamaindex/huggingface';
import { Ollama } from '@llamaindex/ollama';
import Database from 'better-sqlite3';
import * as fs from 'fs';
import * as path from 'path';

// –ì–ª–æ–±–∞–ª–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ verbose —Ä–µ–∂–∏–º
const isVerbose = process.argv.includes('--verbose') || process.argv.includes('-v');

function log(message: string) {
  if (isVerbose) {
    console.log(message);
  }
}

function logError(message: string, error?: any) {
  console.error(message, error || '');
}

// Configure LLM only (embedding —Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ lazy)
Settings.llm = new Ollama({
  model: 'llama3.1:8b',
  config: {
    host: 'http://localhost:11434'
  }
});

interface DocumentChunk {
  id: string;
  text: string;
  embedding: number[];
  metadata: {
    file_name: string;
    file_path: string;
    file_type: string;
    chunk_index: number;
  };
}

class SQLiteVectorStore {
  private db: Database.Database;
  private embedModel: HuggingFaceEmbedding | null = null;

  constructor(dbPath: string = 'rag_cache.db') {
    this.db = new Database(dbPath);
    this.initializeDB();
  }

  private initializeDB() {
    // –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ç–µ –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS documents (
        id TEXT PRIMARY KEY,
        text TEXT NOT NULL,
        embedding BLOB NOT NULL,
        file_name TEXT,
        file_path TEXT,
        file_type TEXT,
        chunk_index INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        file_hash TEXT
      );
    `);

    // –°—ä–∑–¥–∞–≤–∞–º–µ –∏–Ω–¥–µ–∫—Å –∑–∞ –ø–æ-–±—ä—Ä–∑–æ —Ç—ä—Ä—Å–µ–Ω–µ
    this.db.exec(`
      CREATE INDEX IF NOT EXISTS idx_file_hash ON documents(file_hash);
      CREATE INDEX IF NOT EXISTS idx_file_name ON documents(file_name);
    `);

        console.log('‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∞');
  }

  private async getEmbeddingModel(): Promise<HuggingFaceEmbedding> {
    if (!this.embedModel) {
      log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ embedding –º–æ–¥–µ–ª...');
      this.embedModel = new HuggingFaceEmbedding({
        modelType: "BAAI/bge-small-en-v1.5" // –ü–æ-–º–∞–ª—ä–∫ –º–æ–¥–µ–ª
      });
    }
    return this.embedModel;
  }

  private getFileHash(content: string): string {
    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—Ä–æ—Å—Ç hash –∞–ª–≥–æ—Ä–∏—Ç—ä–º –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º crypto dependencies
    let hash = 0;
    for (let i = 0; i < content.length; i++) {
      const char = content.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤ 32bit integer
    }
    return Math.abs(hash).toString(16);
  }

  private chunkText(text: string, chunkSize: number = 600, overlap: number = 50): string[] {
    // –ü–æ-–º–∞–ª–∫–∏ chunks –∑–∞ –ø–æ-–º–∞–ª–∫–æ –ø–∞–º–µ—Ç
    const chunks: string[] = [];
    
    try {
      const paragraphs = text.split('\n\n').filter(p => p.trim().length > 20);
      
      // –ê–∫–æ –Ω—è–º–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∏, —Ä–∞–∑–¥–µ–ª—è–º–µ –ø–æ —Ä–∞–∑–º–µ—Ä
      if (paragraphs.length === 0) {
        let start = 0;
        while (start < text.length) {
          const end = Math.min(start + chunkSize, text.length);
          const chunk = text.slice(start, end).trim();
          if (chunk.length > 10) {
            chunks.push(chunk);
          }
          start = end - overlap;
          if (start >= text.length) break;
        }
        return chunks;
      }
      
      // –ê–∫–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ä—Ç –µ –∫—ä—Å, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –≥–æ –¥–∏—Ä–µ–∫—Ç–Ω–æ
      for (const paragraph of paragraphs) {
        if (paragraph.length <= chunkSize) {
          chunks.push(paragraph.trim());
        } else {
          // –†–∞–∑–¥–µ–ª—è–º–µ –¥—ä–ª–≥–∏—Ç–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∏
          let start = 0;
          while (start < paragraph.length) {
            const end = Math.min(start + chunkSize, paragraph.length);
            const chunk = paragraph.slice(start, end).trim();
            if (chunk.length > 10) {
              chunks.push(chunk);
            }
            start = end - overlap;
            if (start >= paragraph.length) break;
          }
        }
      }

      return chunks.length > 0 ? chunks : [text.slice(0, chunkSize)]; // Fallback
    } catch (error) {
      logError('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ chunking:', error);
      // –ü—Ä–æ—Å—Ç–∏—á—ä–∫ fallback
      return [text.slice(0, 1000)];
    }
  }

  private async getEmbedding(text: string): Promise<number[]> {
    try {
      const model = await this.getEmbeddingModel();
      const embedding = await model.getTextEmbedding(text);
      return embedding;
    } catch (error) {
      logError('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ embedding:', error);
      throw error;
    }
  }

  private cosineSimilarity(a: number[], b: number[]): number {
    if (a.length !== b.length) return 0;
    
    const dotProduct = a.reduce((sum, ai, i) => sum + ai * b[i], 0);
    const magnitudeA = Math.sqrt(a.reduce((sum, ai) => sum + ai * ai, 0));
    const magnitudeB = Math.sqrt(b.reduce((sum, bi) => sum + bi * bi, 0));
    
    if (magnitudeA === 0 || magnitudeB === 0) return 0;
    return dotProduct / (magnitudeA * magnitudeB);
  }

  async indexDocument(filePath: string, content: string): Promise<void> {
    const fileHash = this.getFileHash(content);
    const fileName = path.basename(filePath);

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ñ–∞–π–ª—ä—Ç –≤–µ—á–µ –µ –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω
    const existing = this.db.prepare('SELECT COUNT(*) as count FROM documents WHERE file_path = ? AND file_hash = ?')
      .get(filePath, fileHash) as { count: number };

    if (existing.count > 0) {
      console.log(`‚è≠Ô∏è –§–∞–π–ª—ä—Ç ${fileName} –≤–µ—á–µ –µ –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω (–Ω—è–º–∞ –ø—Ä–æ–º–µ–Ω–∏)`);
      return;
    }

    // –ò–∑—Ç—Ä–∏–≤–∞–º–µ —Å—Ç–∞—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–æ–∑–∏ —Ñ–∞–π–ª
    this.db.prepare('DELETE FROM documents WHERE file_path = ?').run(filePath);

    // –†–∞–∑–¥–µ–ª—è–º–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ chunks
    const chunks = this.chunkText(content);
    console.log(`üìÑ –ò–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω–µ –Ω–∞ ${fileName}: ${chunks.length} —á–∞—Å—Ç–∏`);

    const insertStmt = this.db.prepare(`
      INSERT INTO documents (id, text, embedding, file_name, file_path, file_type, chunk_index, file_hash)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `);

    // Batch processing —Å –ø–æ-–º–∞–ª–∫–æ chunks –Ω–∞–≤–µ–¥–Ω—ä–∂
    const batchSize = 3; // –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –ø–æ 3 chunks –Ω–∞–≤–µ–¥–Ω—ä–∂
    for (let i = 0; i < chunks.length; i += batchSize) {
      const batch = chunks.slice(i, i + batchSize);
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(chunks.length/batchSize)}`);
      
      for (let j = 0; j < batch.length; j++) {
        const chunk = batch[j];
        const chunkIndex = i + j;
        const chunkId = `${filePath}_chunk_${chunkIndex}`;
        
        try {
          // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ embedding –∑–∞ chunk-–∞
          const embedding = await this.getEmbedding(chunk);
          const embeddingBuffer = Buffer.from(new Float32Array(embedding).buffer);

          insertStmt.run(
            chunkId,
            chunk,
            embeddingBuffer,
            fileName,
            filePath,
            'markdown',
            chunkIndex,
            fileHash
          );
          
          console.log(`‚úÖ Chunk ${chunkIndex + 1}/${chunks.length} –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω`);
        } catch (error) {
          console.error(`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω–µ –Ω–∞ chunk ${chunkIndex}:`, error);
        }
      }
      
      // –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É batches –∑–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–∞–º–µ—Ç
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log(`‚úÖ ${fileName} –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
  }

  async searchSimilar(query: string, topK: number = 3): Promise<Array<{text: string, score: number, metadata: any}>> {
    console.log(`üîç –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ø–æ–¥–æ–±–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑–∞: "${query}"`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ embedding –∑–∞ –∑–∞—è–≤–∫–∞—Ç–∞
    const queryEmbedding = await this.getEmbedding(query);
    
    // –í–∑–∏–º–∞–º–µ –≤—Å–∏—á–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏
    const documents = this.db.prepare('SELECT * FROM documents ORDER BY created_at DESC LIMIT 50').all() as Array<{
      id: string;
      text: string;
      embedding: Buffer;
      file_name: string;
      file_path: string;
      file_type: string;
      chunk_index: number;
    }>;

    console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–≤–∞–Ω–µ –Ω–∞ ${documents.length} –∑–∞–ø–∏—Å–∞...`);

    // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ similarity scores
    const results = documents.map(doc => {
      try {
        const docEmbedding = Array.from(new Float32Array(doc.embedding.buffer));
        const score = this.cosineSimilarity(queryEmbedding, docEmbedding);
        
        return {
          text: doc.text,
          score,
          metadata: {
            file_name: doc.file_name,
            file_path: doc.file_path,
            file_type: doc.file_type,
            chunk_index: doc.chunk_index
          }
        };
      } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ similarity:', error);
        return {
          text: doc.text,
          score: 0,
          metadata: {
            file_name: doc.file_name,
            file_path: doc.file_path,
            file_type: doc.file_type,
            chunk_index: doc.chunk_index
          }
        };
      }
    }).filter(result => result.score > 0.1); // –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –º–Ω–æ–≥–æ —Å–ª–∞–±–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ

    // –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ score –∏ –≤—Ä—ä—â–∞–º–µ —Ç–æ–ø K
    return results
      .sort((a, b) => b.score - a.score)
      .slice(0, topK);
  }

  getStats(): { totalDocuments: number, totalFiles: number } {
    const total = this.db.prepare('SELECT COUNT(*) as count FROM documents').get() as { count: number };
    const files = this.db.prepare('SELECT COUNT(DISTINCT file_path) as count FROM documents').get() as { count: number };
    
    return {
      totalDocuments: total.count,
      totalFiles: files.count
    };
  }

  close() {
    if (this.db) {
      this.db.close();
    }
  }
}

// –ì–ª–æ–±–∞–ª–Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è –Ω–∞ vector store
let vectorStore: SQLiteVectorStore | null = null;

async function getOrCreateVectorStore(): Promise<SQLiteVectorStore> {
  if (!vectorStore) {
    vectorStore = new SQLiteVectorStore();
    
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏
    const stats = vectorStore.getStats();
    console.log(`üìä –¢–µ–∫—É—â–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏: ${stats.totalDocuments} –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç ${stats.totalFiles} —Ñ–∞–π–ª–∞`);
    
    if (stats.totalDocuments === 0) {
      // –ò–Ω–¥–µ–∫—Å–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —Å–∞–º–æ –∞–∫–æ –Ω—è–º–∞ –¥–∞–Ω–Ω–∏
      const docsDir = 'docs';
      if (fs.existsSync(docsDir)) {
        const markdownFiles = fs.readdirSync(docsDir).filter((file) => file.endsWith('.md'));
        console.log(`üìö –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω–µ –Ω–∞ ${markdownFiles.length} —Ñ–∞–π–ª–∞...`);

        for (const mdFile of markdownFiles) {
          const filePath = path.join(docsDir, mdFile);
          const content = fs.readFileSync(filePath, 'utf-8');
          await vectorStore.indexDocument(filePath, content);
          
          // –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–æ–≤–µ –∑–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–∞–º–µ—Ç
          await new Promise(resolve => setTimeout(resolve, 200));
        }
      } else {
        console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ docs –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞');
      }
    } else {
      console.log('‚úÖ –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—è –∏–Ω–¥–µ–∫—Å');
    }
  }
  
  return vectorStore;
}

export const ragSQLiteTool = tool({
  name: 'ragSQLiteTool',
  description:
    '–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω SQLite RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞ –±—ä—Ä–∑–æ —Ç—ä—Ä—Å–µ–Ω–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞ –∑–∞ Image Watermarking App. –ò–∑–ø–æ–ª–∑–≤–∞ –≤–µ–∫—Ç–æ—Ä–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ —Å persistent –∫–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ embeddings –∑–∞ –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ –ø–æ-–±—ä—Ä–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏ –∑–∞—è–≤–∫–∏.',
  parameters: z.object({
    query: z.string().describe('–ó–∞—è–≤–∫–∞—Ç–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞.')
  }),
  execute: async ({ query }: { query: string }) => {
    const startTime = Date.now();
    log(`üìö SQLite RAG –¢—ä—Ä—Å–µ–Ω–µ: "${query}"`);

    try {
      const store = await getOrCreateVectorStore();
      const results = await store.searchSimilar(query, 3);
      
      if (results.length === 0) {
        log('üîç –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏');
        return '–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞ –∑–∞ —Ç–∞–∑–∏ –∑–∞—è–≤–∫–∞.';
      }
      
      // –ö–æ–º–±–∏–Ω–∏—Ä–∞–º–µ –Ω–∞–π-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
      const combinedText = results
        .filter(r => r.score > 0.2) // –ü–æ-–Ω–∏—Å—ä–∫ threshold –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –ø–æ–∫—Ä–∏—Ç–∏–µ
        .map((r, i) => {
          const scorePercent = Math.round(r.score * 100);
          return `[${i + 1}] (${scorePercent}% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç) ${r.text}`;
        })
        .join('\n\n');

      const duration = Date.now() - startTime;
      const avgScore = results.reduce((sum, r) => sum + r.score, 0) / results.length;
      
      log(`‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${combinedText.length} —Å–∏–º–≤–æ–ª–∞ –∑–∞ ${duration}ms`);
      log(`üìä Scores: ${results.map(r => r.score.toFixed(3)).join(', ')} (avg: ${avgScore.toFixed(3)})`);
      
      return combinedText || '–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞.';
    } catch (error) {
      logError('‚ùå –ì—Ä–µ—à–∫–∞ –≤ SQLite RAG:', error);
      
      // Fallback –∫—ä–º –ø–æ-–ø—Ä–æ—Å—Ç –ø–æ–¥—Ö–æ–¥
      log('üîÑ –ü—Ä–æ–±–≤–∞–º–µ fallback –ø–æ–¥—Ö–æ–¥...');
      try {
        const docsDir = 'docs';
        const markdownFiles = fs.readdirSync(docsDir).filter((file) => file.endsWith('.md'));
        let allContent = '';
        
        for (const mdFile of markdownFiles) {
          const filePath = path.join(docsDir, mdFile);
          const content = fs.readFileSync(filePath, 'utf-8');
          allContent += `\n\n=== ${mdFile} ===\n${content}`;
        }
        
        // –ü—Ä–æ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤ search –∫–∞—Ç–æ fallback
        const lowerQuery = query.toLowerCase();
        const lowerContent = allContent.toLowerCase();
        
        if (lowerContent.includes('wasm-pack') || lowerContent.includes('prerequisite') || lowerContent.includes('install')) {
          const lines = allContent.split('\n');
          const relevantLines = lines.filter(line => 
            line.toLowerCase().includes('install') || 
            line.toLowerCase().includes('prerequisite') ||
            line.toLowerCase().includes('wasm-pack') ||
            line.toLowerCase().includes('node.js') ||
            line.toLowerCase().includes('rust')
          );
          
          return relevantLines.slice(0, 10).join('\n');
        }
        
        return '–ò–∑–ø–æ–ª–∑–≤–∞–Ω –µ fallback –º–µ—Ç–æ–¥. –ú–æ–ª—è, —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ –∑–∞ –ø—ä–ª–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç.';
      } catch (fallbackError) {
        logError('‚ùå Fallback —Å—ä—â–æ –Ω–µ—É—Å–ø–µ—à–µ–Ω:', fallbackError);
        return '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞.';
      }
    }
  }
});

// Cleanup function –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
process.on('exit', () => {
  if (vectorStore) {
    console.log('üîí –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω–∏...');
    vectorStore.close();
  }
});

process.on('SIGINT', () => {
  if (vectorStore) {
    console.log('üîí –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω–∏...');
    vectorStore.close();
  }
  process.exit(0);
});
