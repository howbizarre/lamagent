import { tool, Settings, Document } from 'llamaindex';
import { z } from 'zod';
import { HuggingFaceEmbedding } from '@llamaindex/huggingface';
import { Ollama } from '@llamaindex/ollama';
import * as fs from 'fs';
import * as path from 'path';

// –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å—Ç–∞—Ä–∏—è –ø–æ–¥—Ö–æ–¥
Settings.embedModel = new HuggingFaceEmbedding();
Settings.llm = new Ollama({
  model: 'llama3.1:8b',
  config: {
    host: 'http://localhost:11434'
  }
});

// –î–µ–º–æ –≤–µ—Ä—Å–∏—è –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞
export const ragOptimizedTool = tool({
  name: 'ragOptimizedTool',
  description:
    '–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞ –±—ä—Ä–∑–æ —Ç—ä—Ä—Å–µ–Ω–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞ –∑–∞ Image Watermarking App. –ü—ä—Ä–≤–∞ –≤–µ—Ä—Å–∏—è –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è—Ç–∞ —Å –∫–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞.',
  parameters: z.object({
    query: z.string().describe('–ó–∞—è–≤–∫–∞—Ç–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞.')
  }),
  execute: async ({ query }: { query: string }) => {
    const startTime = Date.now();
    console.log(`‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω RAG –¢—ä—Ä—Å–µ–Ω–µ: "${query}"`);

    try {
      // –ó–∞—Ä–µ–∂–¥–∞–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ç–µ –æ—â–µ –≤–µ–¥–Ω—ä–∂ (–ø–æ-–∫—ä—Å–Ω–æ —â–µ –∫–µ—à–∏—Ä–∞–º–µ)
      const allDocuments: Document[] = [];
      const docsDir = 'docs';
      const markdownFiles = fs.readdirSync(docsDir).filter((file) => file.endsWith('.md'));

      console.log(`üìÑ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ ${markdownFiles.length} —Ñ–∞–π–ª–∞...`);

      for (const mdFile of markdownFiles) {
        const filePath = path.join(docsDir, mdFile);
        const content = fs.readFileSync(filePath, 'utf-8');
        
        // –†–∞–∑–¥–µ–ª—è–º–µ –Ω–∞ –ø–æ-–º–∞–ª–∫–∏ chunks –∑–∞ –¥–∞ —Å–ø–µ—Å—Ç–∏–º –ø–∞–º–µ—Ç
        const chunks = content.split('\n\n').filter(chunk => chunk.trim().length > 50);
        
        chunks.forEach((chunk, index) => {
          const document = new Document({
            text: chunk,
            metadata: {
              file_name: mdFile,
              file_path: filePath,
              file_type: 'markdown',
              chunk_index: index
            }
          });
          allDocuments.push(document);
        });
      }

      console.log(`üß© –°—ä–∑–¥–∞–¥–µ–Ω–∏ ${allDocuments.length} chunks –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ`);

      // –°—ä–∑–¥–∞–≤–∞–º–µ –ø—Ä–æ—Å—Ç–∏—á–µ–∫ –∏–Ω–¥–µ–∫—Å –≤ –ø–∞–º–µ—Ç—Ç–∞ (–∑–∞ —Å–µ–≥–∞)
      const { VectorStoreIndex } = await import('llamaindex');
      const index = await VectorStoreIndex.fromDocuments(allDocuments.slice(0, 20)); // –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–º–µ –¥–æ 20 chunks –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ

      const queryEngine = index.asQueryEngine({
        similarityTopK: 3 // –ü–æ-–º–∞–ª–∫–æ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ –ø–æ-–±—ä—Ä–∑–æ
      });

      const response = await queryEngine.query({ query });
      const responseText = response.toString();

      const duration = Date.now() - startTime;
      console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω –æ—Ç–≥–æ–≤–æ—Ä: ${responseText.length} —Å–∏–º–≤–æ–ª–∞ –∑–∞ ${duration}ms`);
      
      return responseText;
    } catch (error) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∏—è RAG:', error);
      throw error;
    }
  }
});
